/**********************************************************************************************************************
 * \file Cpu0_Main.c
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/
#include "Ifx_Types.h"
#include "IfxCpu.h"
#include "IfxScuWdt.h"
#include <stdio.h>
//LAMP// PORT -1 / PORT 10-2
#define PORT10_BASE     (0xF003B000)
#define PORT10_IOCR0    (*(volatile unsigned int*)(PORT10_BASE + 0x10)) //10-1번핀 (LED2-RED) 10-2번핀(LED1-BLUE)
#define PORT10_OMR      (*(volatile unsigned int*)(PORT10_BASE + 0x04)) //토글 시켜서, output 값을 저장하지 않아도 된다고 함...

#define PC1             11 //IOCR0-2번핀 (LED-2)
#define PCL1            17 //LED-2 OMR용
#define PS1             1 //LED-2 OMR용
#define PC2             19 //LED-1
#define PCL2            18 //LED-1 OMR용
#define PS2             2 //LED-1 OMR용

//SWITCH// PORT2-1 / PORT 2-0
#define PORT02_BASE     (0xF003A200)
#define PORT02_IOCR0    (*(volatile unsigned int*)(PORT02_BASE + 0x10))  //스위치 D2 : 2-0번핀 , 스위치 D3 : 2-1번핀
#define PORT02_IN       (*(volatile unsigned int*)(PORT02_BASE + 0x24))

#define PC1             11 //D3 IOCR0-1번핀 - D3
#define P1              1 //D3 IN-1번핀
#define PC0             3  //D2
#define P0              0 //D2


//SCU REGISTER
#define SCU_BASE            (0xF0036000) //system control unit. 인터럽트 쓰기 위해서 필요함
#define SCU_EICR1           (*(volatile unsigned int*)(SCU_BASE + 0x214)) // (스위치 2-1)REQ14 - ERS2-1번핀/external register 외부 입력 REQ6 - ERS3-2번핀

#define EXIS0               4  //REQ 14용 D3
#define EXIS1               20 //REQ 6용  D2

#define SCU_IGCR0           (*(volatile unsigned int*)(SCU_BASE + 0x22C)) //인터럽트를 할 핀, 스위치 2-1
#define SCU_IGCR1           (*(volatile unsigned int*)(SCU_BASE + 0x230)) //인터럽트를 할 핀, 스위치 2-0
#define SCU_WDTSCON0        (*(volatile unsigned int*)(SCU_BASE + 0x0F0)) //보안 용

#define FEN0                8    //폴링 엣지 선택 어떤 INPUT 받을지
#define FEN1                24
#define EIEN0               11   //트리거 인터럽트 켜는 스위치
#define EIEN1               27
#define INP0                12  //INPUT NOD POINTER OUTPUT 체널 설정
#define INP1                28
#define IGP0                14  //트리거 작동시 반응.
#define ENDINIT             0
#define LCK                 1


//SCU REGISTER
#define SCU_BASE             (0xF0036000) //system control unit. 인터럽트 쓰기 위해서 필요함
#define SCU_WDT_CPU0CON0     (*(volatile unsigned int*)(SCU_BASE + 0x100)) //타이머에 써야하는 거라고 함.. 보안 비슷한..

#define ENDINIT             0
#define LCK                 1


//SRC REGISTER (어느 ecu에 보내서 작동 시킬지 설정)
#define SRC_BASE            (0xF0038000)
#define SRC_CCU60_SR0       (*(volatile unsigned int*)(SRC_BASE + 0x420))
#define SRC_CCU60_SR1       (*(volatile unsigned int*)(SRC_BASE + 0x424))
//인터럽트
#define SRC_SCUERU0         (*(volatile unsigned int*)(SRC_BASE + 0xCD4)) //SCU ERU SERVICE REQUEST
#define SRC_SCUERU1         (*(volatile unsigned int*)(SRC_BASE + 0xCDC)) //2번핀

#define SRPN                0
#define SRE                 10
#define TOS                 11


//CCU60레지스터(타이머 인터럽트용), timer 12를 사용 하기로 함
#define CCU60_BASE        (0xF0002A00)
#define CCU60_CLC         (*(volatile unsigned int*)(CCU60_BASE + 0x00))
#define CCU60_T12         (*(volatile unsigned int*)(CCU60_BASE + 0x20))  //TIMER 12 카운터 레지스터
#define CCU60_T12PR       (*(volatile unsigned int*)(CCU60_BASE + 0x24))  //TIMER 12 주기 레지스터
#define CCU60_TCTR0       (*(volatile unsigned int*)(CCU60_BASE + 0x70))  // 타이머 컨트롤 레지스터 0
#define CCU60_TCTR4       (*(volatile unsigned int*)(CCU60_BASE + 0x78))  // 타이머 컨트롤 레지스터 4
#define CCU60_INP         (*(volatile unsigned int*)(CCU60_BASE + 0xAC))  //인터럽트 노드 포인트 레지스터
#define CCU60_IEN         (*(volatile unsigned int*)(CCU60_BASE + 0xB0))  //인터럽트 노드 포인트 레지스터

#define DISR                0
#define DISS                1
#define T12CLK              0
#define T12PRE              3
#define CTM                 7
#define T12RS               1
#define T12STR              6  //timer t12 shadow transfer request.타이머는 쉐도우가 있음.
#define ENT12PM             7 //INPT12에 의해 결정. 1 써야함
#define INPT12              10

void init_LED(void)
    {
    //RESET
        PORT10_IOCR0 &= ~((0x1F) << PC1); //LED2 리셋 (0001 1111)
        PORT10_IOCR0 &= ~((0x1F) << PC2); //LED1 리셋 (0001 1111)
    //SET
        PORT10_IOCR0 |=  ((0x10) << PC1); //LED2 ON (0001 0000)
        PORT10_IOCR0 |=  ((0x10) << PC2); //LED1 ON (0001 0000)
    }


void init_Switch(void)
    {
    //RESET
        PORT02_IOCR0 &= ~((0x1F) << PC1); //스위치 2 리셋 (0001 1111)
        PORT02_IOCR0 &= ~((0x1F) << PC0); //스위치 1 리셋 (0001 1111)
    //SET
        PORT02_IOCR0 |=  ((0x2) << PC1); // 스위치 2번 ON (0000 0010)
        PORT02_IOCR0 |=  ((0x1) << PC0); // 스위치 1번 ON (0000 0010)
    }

void init_CCU60(void)
    {
    //UNLOCK
        SCU_WDT_CPU0CON0 = ((SCU_WDT_CPU0CON0 ^ 0xFC) & ~ (1 << LCK)) | ( 1 << ENDINIT);
        while ((SCU_WDT_CPU0CON0 & (1 << LCK)) != 0);
        SCU_WDT_CPU0CON0 = ((SCU_WDT_CPU0CON0 ^ 0xFC) | (1 << LCK)) & ~ ( 1 << ENDINIT);
        while ((SCU_WDT_CPU0CON0 & (1 << LCK)) == 0);
    //
        CCU60_CLC    &=  ~ (1 << DISR); //클락 켜기

        //lock
        SCU_WDT_CPU0CON0 = ((SCU_WDT_CPU0CON0 ^ 0xFC) & ~ (1 << LCK)) | ( 1 << ENDINIT);
        while ((SCU_WDT_CPU0CON0 & (1 << LCK)) != 0);
        SCU_WDT_CPU0CON0 = ((SCU_WDT_CPU0CON0 ^ 0xFC) |   (1 << LCK)) | ( 1 << ENDINIT);
        while ((SCU_WDT_CPU0CON0 & (1 << LCK)) == 0);

        while ((CCU60_CLC & ( 1 << DISS)) != 0); //모듈이 사용 가능해 질때 사용 할 수 있도록. 0이 들어와야 작동됨

    //CCU60 세팅
        CCU60_TCTR0  &= ~((0x7) << T12CLK); // 클락 리셋
        CCU60_TCTR0  |=  ((0x4) << T12CLK); // 클락 1/8로 변경
        CCU60_TCTR0  |=  ( 1 << T12PRE);    // 프리스케일 1/256

        CCU60_TCTR0  &= ~(1 << CTM) ;       //엣지 얼라인 동작 위해 0입력

//      CCU60_T12PR  =   24414 - 1;         //
        CCU60_T12PR  =   2000000 ;         //period patch 주기를 맞추기 위한 빈도. 적당히 선택하면 될듯

        CCU60_TCTR4  =  ( 1 << T12STR ); //shadow transfer 쓰기 위함

        CCU60_T12 = 0;

//CCU10 T12 INTERRRUPT
        CCU60_INP       &= ~((0x3) << INPT12 );  //timer 12의 OUTPUT 설정. (timer12를 SR-0에 전달) SERVICE REQUEST OUTPUT-0번

        CCU60_IEN       |=  ( 1    << ENT12PM);  //  1설정

        SRC_CCU60_SR0   &= ~ ((0xFF) << SRPN); //인터럽트 우선순위
        SRC_CCU60_SR0   |=   ((0x0A) << SRPN); //0A 입력

        SRC_CCU60_SR0   &= ~ ((0x3) << TOS);   //CPU 위치

        SRC_CCU60_SR0   |= ( 1 << SRE);        //SERVICE REQUEST 사용 여부

//timer 12 start
        CCU60_TCTR4     |= ( 1 << T12RS);      //shadow transfer 시작

    }


void init_ERU(void)
{
    //UNLOCK
    SCU_WDTSCON0 = ((SCU_WDTSCON0 ^ 0xFC) & ~ (1 << LCK)) | ( 1 << ENDINIT);
    while ((SCU_WDTSCON0 & (1 << LCK)) != 0);
    SCU_WDTSCON0 = ((SCU_WDTSCON0 ^ 0xFC) | (1 << LCK)) & ~ ( 1 << ENDINIT);
    while ((SCU_WDTSCON0 & (1 << LCK)) == 0);
//
    SCU_EICR1 &= ~((0x7) << EXIS0); //스위치 2-1 리셋
    SCU_EICR1 |=  ((0x1) << EXIS0); //스위치 001로 입력 (CPU 핀 설정)

    SCU_EICR1 &= ~((0x7) << EXIS1); //스위치 2-0 리셋
    SCU_EICR1 |=  ((0x2) << EXIS1); //스위치 010로 입력 (CPU 핀 설정)

    SCU_EICR1 |=  ( 1 << FEN0 ); // 스위치 2-1 폴링 엣지로 선택 명령어1
    SCU_EICR1 |=  ((0x1) << EIEN0 ); //인터럽트 켜라 명령어1
    SCU_EICR1 &= ~((0x7) << INP0 ); //아웃풋 체널으로 선택할 ECU 선택. OGU 0번 명령어 000

    SCU_EICR1 |=  ( 1 << FEN1 ); //스위치 2-0
    SCU_EICR1 |=  ((0x1) << EIEN1 ); //
    SCU_EICR1 &= ~((0x7) << INP1 ); //
    SCU_EICR1 |=  ((0x2) << INP1 ); //OGU2번 체널 2번 설정 010


    SCU_IGCR0 &= ~((0x3) << IGP0); // 스위치 눌리면 나갈 아웃풋 체널 00 클리어
    SCU_IGCR0 |=  ((0x1) << IGP0); // 아웃풋 체컬 01 입력  (스위치 01로 입력 (CPU 핀 설정))

    SCU_IGCR1 &= ~((0x3) << IGP0); //
    SCU_IGCR1 |=  ((0x1) << IGP0); //

    //lock
    SCU_WDTSCON0 = ((SCU_WDTSCON0 ^ 0xFC) & ~ (1 << LCK)) | ( 1 << ENDINIT);
    while ((SCU_WDTSCON0 & (1 << LCK)) != 0);
    SCU_WDTSCON0 = ((SCU_WDTSCON0 ^ 0xFC) |   (1 << LCK)) | ( 1 << ENDINIT);
    while ((SCU_WDTSCON0 & (1 << LCK)) == 0);

    //SRC
    SRC_SCUERU0 &= ~((0xFF) << SRPN); // 인터럽트 우선순위 클리어
    SRC_SCUERU0 |=  ((0x10) << SRPN); // 인터럽트 우선순위 입력
    SRC_SCUERU0 &= ~((0x3) << TOS); // CPU 핀 설정 00핀 - 1
    SRC_SCUERU0 |= (1<< SRE); //enable

    SRC_SCUERU1 &= ~((0xFF) << SRPN);
    SRC_SCUERU1 |=  ((0x09) << SRPN); //2번핀 우선순위
    SRC_SCUERU1 &= ~((0x3) << TOS);
    SRC_SCUERU1 |= (1<< SRE); //enable

}

//my library

IfxCpu_syncEvent g_cpuSyncEvent = 0;

int core0_main(void)
{
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG0 AND SAFETY WATCHDOG ARE DISABLED HERE!!
     * Enable the watchdogs and service them pe
     * riodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
    IfxScuWdt_disableSafetyWatchdog(IfxScuWdt_getSafetyWatchdogPassword());
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
    

    init_LED();
    init_CCU60();
    init_ERU();

    while(1)
    {
    }
    return(1);
}

__interrupt(0x0A)__vector_table(0)
void CCU60_T12_ISR0(void)
{
  PORT10_OMR |= ((1<<PCL1) | (1<<PS1));

}

__interrupt(0x0B)__vector_table(0)
void CCU60_T12_ISR1(void)
{
  PORT10_OMR |= ((1<<PCL2) | (1<<PS2));

}

__interrupt(0x10)__vector_table(0)
void ERU0_ISR(void)
{
    PORT10_OMR |= ((1<<PCL1) | (1<<PS1));
}


__interrupt(0x09)__vector_table(0)
void ERU1_ISR(void)
{
    PORT10_OMR |= ((1<<PCL2) | (1<<PS2));
}

