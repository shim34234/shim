/**********************************************************************************************************************
 * \file Cpu0_Main.c
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/
#include "Ifx_Types.h"
#include "IfxCpu.h"
#include "IfxScuWdt.h"
#include <stdio.h>

//LAMP// PORT -1 / PORT 10-2
#define PORT10_BASE     (0xF003B000)
#define PORT10_IOCR0    (*(volatile unsigned int*)(PORT10_BASE + 0x10)) //10-1번핀 (LED2-RED) 10-2번핀(LED1-BLUE)
#define PORT10_OMR      (*(volatile unsigned int*)(PORT10_BASE + 0x04)) //토글 시켜서, output 값을 저장하지 않아도 된다고 함...

#define PC1             11 //IOCR0-2번핀 (LED-2)
#define PCL1            17 //LED-2 OMR용
#define PS1             1 //LED-2 OMR용
#define PC2             19 //LED-1
#define PCL2            18 //LED-1 OMR용
#define PS2             2 //LED-1 OMR용

//SWITCH// PORT2-1 / PORT 2-0
#define PORT02_BASE     (0xF003A200)
#define PORT02_IOCR0    (*(volatile unsigned int*)(PORT02_BASE + 0x10))  //스위치 D2 : 2-0번핀 , 스위치 D3 : 2-1번핀
#define PORT02_IN       (*(volatile unsigned int*)(PORT02_BASE + 0x24))

#define PC1             11 //D3 IOCR0-1번핀 - D3
#define P1              1 //D3 IN-1번핀
#define PC0             3  //D2
#define P0              0 //D2


//RGB LAMP
#define PORT10_BASE     (0xF003B000)
#define PORT10_IOCR0    (*(volatile unsigned int*)(PORT10_BASE + 0x10)) //BLUE 10-3번핀(17번)
#define PORT10_IOCR4    (*(volatile unsigned int*)(PORT10_BASE + 0x14)) //GREEN 10-5번핀(11)
#define PORT10_OMR      (*(volatile unsigned int*)(PORT10_BASE + 0x04))

#define PORT02_BASE     (0xF003A200)
#define PORT02_IOCR4    (*(volatile unsigned int*)(PORT02_BASE + 0x14)) //RED 2-7번핀(27)
#define PORT02_OMR      (*(volatile unsigned int*)(PORT02_BASE + 0x04))

#define PC3             27
#define PC5             11
#define PC7             27
#define PCL3            19
#define PCL5            21
#define PCL7            23
#define PS3             3
#define PS5             5
#define PS7             7


//SCU REGISTER
#define SCU_BASE             (0xF0036000) //system control unit. 인터럽트 쓰기 위해서 필요함
#define SCU_WDT_CPU0CON0     (*(volatile unsigned int*)(SCU_BASE + 0x100)) //타이머에 써야하는 거라고 함.. 보안 비슷한..

#define ENDINIT             0
#define LCK                 1


//SRC REGISTER (어느 ecu에 보내서 작동 시킬지 설정)
#define SRC_BASE            (0xF0038000)
#define SRC_CCU60_SR0       (*(volatile unsigned int*)(SRC_BASE + 0x420))
#define SRC_SCUERU0         (*(volatile unsigned int*)(SRC_BASE + 0xCD4)) //SCU ERU SERVICE REQUEST
#define SRC_SCUERU1         (*(volatile unsigned int*)(SRC_BASE + 0xCDC)) //2번핀

#define SRPN                0
#define SRE                 10
#define TOS                 11

//VADC 함수
#define VADC_BASE           (0xF0020000)
#define VADC_GLOBCFG        (*(volatile unsigned int*)(VADC_BASE + 0x0000))

//그룹 설정
#define VADC_CLC            (*(volatile unsigned int*)(VADC_BASE + 0x0000))
#define DISR                0
#define DISS                1


//체널 설정 (INPUT과 OUTPUT을 설정함)
#define VADC_G4CHCTR7       (*(volatile unsigned int*)(VADC_BASE + 0x161C)) // 체널 설정 CH-7
#define ICLSEL              0  //input class 설정하는 것, 우리는 그룹 정의 0
#define RESREG              16 //결과 레지스터 번호 결정, 7번
#define RESPOS              21 //left 정렬, 오른쪽 정렬 결정,

//RESULT REGISTER 설정
#define VADC_G4RES1         (*(volatile unsigned int*)(VADC_BASE + 0x1704)) // 결과 레지스터 설정
#define RESULT              0
#define VF                  31

//3) ARBITER(소스 관리하는 컨트롤러)
#define VADC_G4ARBPR        (*(volatile unsigned int*)(VADC_BASE + 0x1484)) //ADC 작업 우선순위 설정
#define PRIO0               0  //우선 순위 설정, 최우선순위 11
#define CSM0                3  //기다렸다 실행
#define ASEN0               24 //

//2) REGUEST 소스를 설정 (3가지 있음, 우리는 0번.QUEUE)
#define VADC_G4QMR0         (*(volatile unsigned int*)(VADC_BASE + 0x1504)) //QUEUE설정 (요청 저장 공간)
#define ENGT                0   //S/W로만 작동 할 것 01 써야함
#define TREV                9   //실제 실행 시키는 역할  트리거 이벤트 값 1
#define FLUSH               10  //QUEUE 초기화 값 1

//4) 실행 준비
#define VADC_G4ARBCFG       (*(volatile unsigned int*)(VADC_BASE + 0x1480)  //ARBITER CONFIGRATION REGISTER 어느 소스를 쓸지 결정하는 것 QUEUE
#define ANONC               0 // 전력 소모때문에 꺼져 있어서, 켜는 작업 필요 NORMAL OPERATION

//5) INPUT CLASS를 설정
#define VADC_G4ICLASS0      (*(volatile unsigned int*)(VADC_BASE + 0x14A0)) //input class. ADC 설정
#define STCS                0 // delay 시간 0초, sample time 000000으로 설정
#define CMS                 8 // 12비트로 쓸지 결정 00

//1) conversion request 설정
#define VADC_G4QINR0        (*(volatile unsigned int*)(VADC_BASE + 0x1510)) //컨버전 요청. 몇번 체널 요청할 것인지
#define REQCHNR             0  //체널 번호
#define RF                  5  //계속 요청할건지, 한번만 할건지


//CCU60레지스터
#define CCU60_BASE        (0xF0002A00)
#define CCU60_CLC         (*(volatile unsigned int*)(CCU60_BASE + 0x00))
#define CCU60_T12         (*(volatile unsigned int*)(CCU60_BASE + 0x20))
#define CCU60_T12PR       (*(volatile unsigned int*)(CCU60_BASE + 0x24))
#define CCU60_TCTR0       (*(volatile unsigned int*)(CCU60_BASE + 0x70))
#define CCU60_TCTR4       (*(volatile unsigned int*)(CCU60_BASE + 0x78))
#define CCU60_INP         (*(volatile unsigned int*)(CCU60_BASE + 0xAC))
#define CCU60_IEN         (*(volatile unsigned int*)(CCU60_BASE + 0xB0))

#define DISR                0
#define DISS                1
#define T12CLK              0
#define T12PRE              3
#define CTM                 7
#define T12RS               1
#define T12STR              6
#define ENT12PM             7
#define INPT12              10


//void init_RGBLED(void);
//void init_VADC(void);
//void VADC_startConversion(void);
//unsigned int VADC_readResult(void);


void init_LED(void)
    {
    //RESET
        PORT10_IOCR0 &= ~((0x1F) << PC1); //LED2 리셋 (0001 1111)
        PORT10_IOCR0 &= ~((0x1F) << PC2); //LED1 리셋 (0001 1111)
    //SET
        PORT10_IOCR0 |=  ((0x10) << PC1); //LED2 ON (0001 0000)
        PORT10_IOCR0 |=  ((0x10) << PC2); //LED1 ON (0001 0000)
    }


void init_Switch(void)
    {
    //RESET
        PORT02_IOCR0 &= ~((0x1F) << PC1); //스위치 2 리셋 (0001 1111)
        PORT02_IOCR0 &= ~((0x1F) << PC0); //스위치 1 리셋 (0001 1111)
    //SET
        PORT02_IOCR0 |=  ((0x2) << PC1); // 스위치 2번 ON (0000 0010)
        PORT02_IOCR0 |=  ((0x1) << PC0); // 스위치 1번 ON (0000 0010)
    }


void init_RGBLED(void)
{
//RESET PC1 PC2
    PORT02_IOCR4 &= ~((0x1F) << PC7);
    PORT10_IOCR4 &= ~((0x1F) << PC5); //RGB-1 리셋 (0001 1111)
    PORT10_IOCR0 &= ~((0x1F) << PC3); //RGB-2 리셋 (0001 1111)

//SET PC1 PC2
    PORT02_IOCR4 |= ((0x10) << PC7);
    PORT10_IOCR4 |= ((0x10) << PC5); //RGB-1 리셋 (0001 1111)
    PORT10_IOCR0 |= ((0x10) << PC3); //RGB-2 리셋 (0001 1111)
}

void init_VADC(void)
{
    //UNLOCK
        SCU_WDT_CPU0CON0 = ((SCU_WDT_CPU0CON0 ^ 0xFC) & ~ (1 << LCK)) | ( 1 << ENDINIT);
        while ((SCU_WDT_CPU0CON0 & (1 << LCK)) != 0);
        SCU_WDT_CPU0CON0 = ((SCU_WDT_CPU0CON0 ^ 0xFC) | (1 << LCK)) & ~ ( 1 << ENDINIT);
        while ((SCU_WDT_CPU0CON0 & (1 << LCK)) == 0);
    //
        VADC_CLC    &=  ~ (1 << DISR); //클락 켜기

        //lock
        SCU_WDT_CPU0CON0 = ((SCU_WDT_CPU0CON0 ^ 0xFC) & ~ (1 << LCK)) | ( 1 << ENDINIT);
        while ((SCU_WDT_CPU0CON0 & (1 << LCK)) != 0);
        SCU_WDT_CPU0CON0 = ((SCU_WDT_CPU0CON0 ^ 0xFC) |   (1 << LCK)) | ( 1 << ENDINIT);
        while ((SCU_WDT_CPU0CON0 & (1 << LCK)) == 0);

        while ((VADC_CLC & ( 1 << DISS)) != 0); //모듈이 사용 가능해 질때 사용 할 수 있도록. 0이 들어와야 작동됨

        VADC_G4ARBPR |= ((0X3) << PRIO0); //우선순위 11
        VADC_G4ARBPR &= ~( 1 << CSM0);    //wait for start mode
        VADC_G4ARBPR |= ((1) << ASEN0);   // 리퀘스트 사용 -1


        VADC_G4QMR0  &= ~((0x3 << ENGT));
        VADC_G4QMR0  |= ((0x1 << ENGT));

        VADC_G4QMR0  |= ( 1 << FLUSH);

        VADC_G4ARBCFG |= ((0x3) << ANONC));

        VADC_G4ICLASS0 &= ~((0x7 << CMS));

        //VADC GROUP4, CHANNEL1 7 세팅
        VADC_G4CHCTR7 |= ( 1 << RESPOS );
        VADC_G4CHCTR7 &= ~ ((0xF) << RESREG);
        VADC_G4CHCTR7 |= ( 1 << RESREG );
        VADC_G4CHCTR7 &= ~((0x3) << ICLSEL);

}

void VADC_startConversion(void) //user request 설정
{
    VADC_G4QINR0 &= ~(0x1F);
    VADC_G4QINR0 |= (0x07); //체널 7번으로 나가게


    VADC_G4QINR0 &= ~ (1<<RF); //single shot mode

    VADC_G4QMR0  |= ( 1 << TREV ); //트리거 이벤트 1

}

unsigned int VADC_readResult(void)
{
    unsigned int result;

    while   ((VADC_G4RES1 & (1 << VF)) ==0 );

    result = (VADC_G4RES1 & ((0xFFFF) << RESULT));

    return result;
}


//my library

IfxCpu_syncEvent g_cpuSyncEvent = 0;

int core0_main(void)
{
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG0 AND SAFETY WATCHDOG ARE DISABLED HERE!!
     * Enable the watchdogs and service them periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
    IfxScuWdt_disableSafetyWatchdog(IfxScuWdt_getSafetyWatchdogPassword());
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
    
    unsigned int adcResult;

    init_RGBLED();
    init_VADC();
    init_LED();

    while(1)
    {

        VADC_startConversion();
        adcResult = VADC_readResult();

        if( adcResult >= 3096 )
        {
            PORT02_OMR  |= (1<<PS7);
            PORT10_OMR |= (1<<PCL5);
            PORT10_OMR |= (1<<PCL3);
        }

        else if( adcResult >= 2048 )
        {
            PORT02_OMR  |= (1<<PCL7);
            PORT10_OMR |= (1<<PS5);
            PORT10_OMR |= (1<<PCL3);
        }

        else if( adcResult >= 1024 )
        {
            PORT02_OMR  |= (1<<PCL7);
            PORT10_OMR |= (1<<PCL5);
            PORT10_OMR |= (1<<PS3);
        }
        else
        {
            PORT10_OMR |= (1<<PCL3);
            PORT10_OMR |= (1<<PS1);
            PORT10_OMR |= (1<<PS2);
        }
    }
    return(1);
}
