/**********************************************************************************************************************
 * \file Cpu0_Main.c
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/
#include "Ifx_Types.h"
#include "IfxCpu.h"
#include "IfxScuWdt.h"
#include <stdio.h>

//LAMP// PORT -1 / PORT 10-2
#define PORT10_BASE     (0xF003B000)
#define PORT10_IOCR0    (*(volatile unsigned int*)(PORT10_BASE + 0x10)) //10-1번핀 (LED2-RED) 10-2번핀(LED1-BLUE)
#define PORT10_OMR      (*(volatile unsigned int*)(PORT10_BASE + 0x04)) //토글 시켜서, output 값을 저장하지 않아도 된다고 함...

#define PC1             11 //IOCR0-2번핀 (LED-2)
#define PCL1            17 //LED-2 OMR용
#define PS1             1 //LED-2 OMR용
#define PC2             19 //LED-1
#define PCL2            18 //LED-1 OMR용
#define PS2             2 //LED-1 OMR용

//SWITCH// PORT2-1 / PORT 2-0
#define PORT02_BASE     (0xF003A200)
#define PORT02_IOCR0    (*(volatile unsigned int*)(PORT02_BASE + 0x10))  //스위치 D2 : 2-0번핀 , 스위치 D3 : 2-1번핀
#define PORT02_IN       (*(volatile unsigned int*)(PORT02_BASE + 0x24))

#define PC1             11 //D3 IOCR0-1번핀 - D3
#define P1              1 //D3 IN-1번핀
#define PC0             3  //D2
#define P0              0 //D2


//RGB LAMP
#define PORT10_BASE     (0xF003B000)
#define PORT10_IOCR0    (*(volatile unsigned int*)(PORT10_BASE + 0x10)) //BLUE 10-3번핀(17번)
#define PORT10_IOCR4    (*(volatile unsigned int*)(PORT10_BASE + 0x14)) //GREEN 10-5번핀(11)
#define PORT10_OMR      (*(volatile unsigned int*)(PORT10_BASE + 0x04))

#define PORT02_BASE     (0xF003A200)
#define PORT02_IOCR4    (*(volatile unsigned int*)(PORT02_BASE + 0x14)) //RED 2-7번핀(27)
#define PORT02_OMR      (*(volatile unsigned int*)(PORT02_BASE + 0x04))

#define PC3             27
#define PC5             11
#define PC7             27
#define PCL3            19
#define PCL5            21
#define PCL7            23
#define PS3             3
#define PS5             5
#define PS7             7


//SCU REGISTER
#define SCU_BASE             (0xF0036000) //system control unit. 인터럽트 쓰기 위해서 필요함
#define SCU_WDT_CPU0CON0     (*(volatile unsigned int*)(SCU_BASE + 0x100)) //타이머에 써야하는 거라고 함.. 보안 비슷한..

#define ENDINIT             0
#define LCK                 1


//CCU60레지스터
#define CCU60_BASE        (0xF0002A00)
#define CCU60_CLC         (*(volatile unsigned int*)(CCU60_BASE + 0x00))
#define CCU60_T12         (*(volatile unsigned int*)(CCU60_BASE + 0x20))
#define CCU60_T12PR       (*(volatile unsigned int*)(CCU60_BASE + 0x24))
#define CCU60_TCTR0       (*(volatile unsigned int*)(CCU60_BASE + 0x70))
#define CCU60_TCTR4       (*(volatile unsigned int*)(CCU60_BASE + 0x78))
#define CCU60_INP         (*(volatile unsigned int*)(CCU60_BASE + 0xAC))
#define CCU60_IEN         (*(volatile unsigned int*)(CCU60_BASE + 0xB0))

#define DISR                0
#define DISS                1
#define T12CLK              0
#define T12PRE              3
#define CTM                 7
#define T12RS               1
#define T12STR              6
#define ENT12PM             7
#define INPT12              10


/* VADC Registers */
#define VADC_BASE       (0xF0020000)
#define VADC_CLC        (*(volatile unsigned int*)(VADC_BASE + 0x000))
#define VADC_GLOBCFG    (*(volatile unsigned int*)(VADC_BASE + 0x080))
#define VADC_G4ARBCFG   (*(volatile unsigned int*)(VADC_BASE + 0x1480))
#define VADC_G4ARBPR    (*(volatile unsigned int*)(VADC_BASE + 0x1484))
#define VADC_G4ICLASS0  (*(volatile unsigned int*)(VADC_BASE + 0x14A0))
#define VADC_G4QMR0     (*(volatile unsigned int*)(VADC_BASE + 0x1504))
#define VADC_G4QINR0    (*(volatile unsigned int*)(VADC_BASE + 0x1510))
#define VADC_G4CHCTR6   (*(volatile unsigned int*)(VADC_BASE + 0x1618))
#define VADC_G4RES1     (*(volatile unsigned int*)(VADC_BASE + 0x1704))

#define DISS            1
#define DISR            0
#define ANONC           0
#define ASEN0           24
#define CSM0            3
#define PRIO0           0
#define CMS             8
#define STCS            0
#define FLUSH           10
#define TREV            9
#define ENGT            0
#define RF              5
#define REQCHNR         0
#define RESPOS          21
#define RESREG          16
#define ICLSEL          0
#define VF              31
#define RESULT          0
#define CHNR            20


//GTM
#define GTM_BASE                      (0xF0100000)
#define GTM_CLC                       (*(volatile unsigned int*)(GTM_BASE + 0x9FD00))
#define DISR                          0
#define DISS                          1

#define GTM_TOUTSEL6                 (*(volatile unsigned int*)(GTM_BASE + 0x9FD48)) //TOUT103 에 연결을 하려면, TOUT6, SEL7 선정 필요
#define SEL7                         14


#define GTM_CMU_FXCLK_CTRL           (*(volatile unsigned int*)(GTM_BASE + 0x00344))
#define FXCLK_SEL                     0 //global clock 0000 사용

#define GTM_CMU_CLK_EN               (*(volatile unsigned int*)(GTM_BASE + 0x00300))
#define EN_FXCLK                      22     // 10으로 설정

#define GTM_TOM0_TGC0_GLB_CTRL       (*(volatile unsigned int*)(GTM_BASE + 0x08030))
#define HOST_TRIG                    0      // host trigger
#define UPEN_CTRL1                   18     // shadow 기능, 10으로

#define GTM_TOM0_TGC0_FUPD_CTRL      (*(volatile unsigned int*)(GTM_BASE + 0x08038))
#define FUPD_CTRL1                   2     //트리거 신호에 의해 실행 되도록
#define RSTCN0_CH1                   18    //counter reset?

#define GTM_TOM0_TGC0_ENDIS_CTRL     (*(volatile unsigned int*)(GTM_BASE + 0x08070))
#define ENDIS_CTRL1                  2     //TOM CHANNEL 1 업데이트

#define GTM_TOM0_TGC0_OUTEN_CTRL     (*(volatile unsigned int*)(GTM_BASE + 0x08078))
#define OUTEN_CTRL1                  2     //트리거 신호에 따른 OUTLET 설정 CHENNEL 1 사용하도록.

#define GTM_TOM0_CH1_CTRL            (*(volatile unsigned int*)(GTM_BASE + 0x08040))
#define SL                           11     //polarity
#define CLK_SRC_SR                   12     //클럭 주파수 변경 1 (1/8)

#define GTM_TOM0_CH1_SR0             (*(volatile unsigned int*)(GTM_BASE + 0x08044))
#define SR0                          0      //conpare shadow register (ccu0)

#define GTM_TOM0_CH1_SR1             (*(volatile unsigned int*)(GTM_BASE + 0x08048))
#define SR1                          0      //conpare shadow register (ccu1)



void init_LED(void)
    {
    //RESET
        PORT10_IOCR0 &= ~((0x1F) << PC1); //LED2 리셋 (0001 1111)
        PORT10_IOCR0 &= ~((0x1F) << PC2); //LED1 리셋 (0001 1111)
    //SET
        PORT10_IOCR0 |=  ((0x10) << PC1); //LED2 ON (0001 0000)
        PORT10_IOCR0 |=  ((0x10) << PC2); //LED1 ON (0001 0000)
    }


void init_Switch(void)
    {
    //RESET
        PORT02_IOCR0 &= ~((0x1F) << PC1); //스위치 2 리셋 (0001 1111)
        PORT02_IOCR0 &= ~((0x1F) << PC0); //스위치 1 리셋 (0001 1111)
    //SET
        PORT02_IOCR0 |=  ((0x2) << PC1); // 스위치 2번 ON (0000 0010)
        PORT02_IOCR0 |=  ((0x1) << PC0); // 스위치 1번 ON (0000 0010)
    }


void init_RGBLED(void)
{
//RESET PC1 PC2
    PORT02_IOCR4 &= ~((0x1F) << PC7);
    PORT10_IOCR4 &= ~((0x1F) << PC5); //RGB-1 리셋 (0001 1111)
    PORT10_IOCR0 &= ~((0x1F) << PC3); //RGB-2 리셋 (0001 1111)

//SET PC1 PC2
    PORT02_IOCR4 |= ((0x10) << PC7);
    PORT10_IOCR4 |= ((0x10) << PC5); //RGB-1 리셋 (0001 1111)
    PORT10_IOCR0 |= ((0x10) << PC3); //RGB-2 리셋 (0001 1111)
}


void VADC_startConversion(void) //user request 설정
{
    VADC_G4QINR0 &= ~(0x1F);
    VADC_G4QINR0 |= (0x07); //체널 7번으로 나가게


    VADC_G4QINR0 &= ~ (1<<RF); //single shot mode

    VADC_G4QMR0  |= ( 1 << TREV ); //트리거 이벤트 1

}

unsigned int VADC_readResult(void)
{
    unsigned int result;

    while   ((VADC_G4RES1 & (1 << VF)) ==0 );

    result = (VADC_G4RES1 & ((0xFFFF) << RESULT));

    return result;
}


//my library

IfxCpu_syncEvent g_cpuSyncEvent = 0;

int core0_main(void)
{
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG0 AND SAFETY WATCHDOG ARE DISABLED HERE!!
     * Enable the watchdogs and service them periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
    IfxScuWdt_disableSafetyWatchdog(IfxScuWdt_getSafetyWatchdogPassword());
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
    
    unsigned int adcResult;

    init_RGBLED();
    init_GTM_TOM0_PWM();
    init_LED();

    while(1)
    {

        VADC_startConversion();
        adcResult = VADC_readResult();

        if( adcResult >= 3096 )
        {
            PORT02_OMR  |= (1<<PS7);
            PORT10_OMR |= (1<<PCL5);
            PORT10_OMR |= (1<<PCL3);
        }

        else if( adcResult >= 2048 )
        {
            PORT02_OMR  |= (1<<PCL7);
            PORT10_OMR |= (1<<PS5);
            PORT10_OMR |= (1<<PCL3);
        }

        else if( adcResult >= 1024 )
        {
            PORT02_OMR  |= (1<<PCL7);
            PORT10_OMR |= (1<<PCL5);
            PORT10_OMR |= (1<<PS3);
        }
        else
        {
            PORT10_OMR |= (1<<PCL3);
            PORT10_OMR |= (1<<PS1);
            PORT10_OMR |= (1<<PS2);
        }
    }
    return(1);
}
